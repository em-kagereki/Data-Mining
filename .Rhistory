mutate(model = "Logistic Regression") # add the name of the model to every row
rf_metrics <-
rf_res %>%
collect_metrics(summarise = TRUE) %>%
mutate(model = "Random Forest")
xgb_metrics <-
xgb_res %>%
collect_metrics(summarise = TRUE) %>%
mutate(model = "XGBoost")
knn_metrics <-
knn_res %>%
collect_metrics(summarise = TRUE) %>%
mutate(model = "Knn")
# nnet_metrics <-
#   nnet_res %>%
#   collect_metrics(summarise = TRUE) %>%
#   mutate(model = "Neural Net")
# create dataframe with all models
model_compare <- bind_rows(
log_metrics,
rf_metrics,
xgb_metrics,
knn_metrics,
# nnet_metrics
)
# change data structure
model_comp <-
model_compare %>%
select(model, .metric, mean, std_err) %>%
pivot_wider(names_from = .metric, values_from = c(mean, std_err))
# show mean F1-Score for every model
model_comp %>%
arrange(mean_f_meas) %>%
mutate(model = fct_reorder(model, mean_f_meas)) %>% # order results
ggplot(aes(model, mean_f_meas, fill=model)) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Blues") +
geom_text(
size = 3,
aes(label = round(mean_f_meas, 2), y = mean_f_meas + 0.08),
vjust = 1
)+
#scale_color_viridis_d(option = "plasma", end = .6)+
theme_economist()
## Model tuning
rf_best_mod <-
rand_forest(mtry = tune(), min_n = tune(), trees = 128) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_best_workflow <-
workflow() %>%
add_model(rf_best_mod) %>%
add_recipe(lr_recipe)
cores <- parallel::detectCores()
cores
set.seed(345)
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(f_meas))
rf_best <-
rf_best_res %>%
select_best(metric = "f_meas")
## By calling rf_best, we are collecting the parametres for the best model
rf_best_res %>%
collect_predictions()
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best_res) %>%
roc_curve(EXPIRE_FLAG, .pred_class) %>%
mutate(model = "Tuned Random Forest")
rf_best_metrics <-
rf_best_res %>%
collect_metrics(summarise = TRUE) %>%
mutate(model = "Tuned Random Forest")
mean<-mean(rf_best_metrics$mean)
model_comp<-model_comp %>%
select(model,mean_f_meas) %>%
add_row(model = "Tuned Random Forest", mean_f_meas = mean)
model_comp %>%
arrange(mean_f_meas) %>%
mutate(model = fct_reorder(model, mean_f_meas)) %>% # order results
ggplot(aes(model, mean_f_meas, fill=model)) +
geom_col() +
coord_flip() +
scale_fill_brewer(palette = "Blues") +
geom_text(
size = 3,
aes(label = round(mean_f_meas, 2), y = mean_f_meas + 0.08),
vjust = 1
)+
#scale_color_viridis_d(option = "plasma", end = .6)+
theme_economist()
## The model with the best estimat
## We have to repeat this code to get the new metrics
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
rf_best <-
rf_best_res %>%
select_best(metric = "roc_auc")
rf_best_res %>%
collect_predictions()
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(EXPIRE_FLAG, .pred_0) %>%
mutate(model = "Tuned Random Forest")
bind_rows(rf_auc,knn_auc,rf_auc_best,log_auc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) +
geom_path(lwd = 1.5, alpha = 0.8) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option = "plasma", end = .6)+
theme_economist()
# scale_color_economist()
## Update the model
last_rf_mod <-
rand_forest(mtry = rf_best$mtry, min_n = rf_best$min_n, trees = 128) %>%
set_engine("ranger", num.threads = cores, importance = "impurity") %>%
set_mode("classification")
last_rf_workflow <-
rf_wflow %>%
update_model(last_rf_mod)
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits)
Predictions<-last_rf_fit %>%
collect_predictions()
last_rf_fit %>%
collect_metrics()
Predictions<-last_rf_fit %>%
collect_predictions()
Predictions2<-rf_best_res %>%
collect_predictions() %>%
mutate(.pred_0 =ifelse(.pred_0>0.5,0,1))
Predictions$EXPIRE_FLAG<-as.numeric(Predictions$EXPIRE_FLAG)
Predictions$.pred_class<-as.numeric(Predictions$.pred_class)
library(cutpointr)
cp <- cutpointr(Predictions, .pred_class, EXPIRE_FLAG,
method = maximize_metric, metric = sum_sens_spec)
summary(cp)
plot(cp)
#opt_cut_b <- cutpointr(Predictions, .pred_class, EXPIRE_FLAG, boot_runs = 1000)
last_rf_fit %>%
pluck(".workflow", 1) %>%
extract_fit_parsnip() %>%
vip(num_features = 20)
# THreshold of the F1
#https://arxiv.org/abs/1402.1892
View(data2)
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
finalMetrics <- read.csv("final_metrics.csv", h=T, sep=',')
View(finalMetrics)
library(ggplot2)
library(dplyr)
colnames(finalMetrics)
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.4, fill = "white") +
geom_jitter(aes(color = model, shape = model),
width = 0.1, size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
labs(x = NULL)   # Remove x axis label
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.4, fill = "white") +
geom_jitter(aes(color = model, shape = model)) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
labs(x = NULL)   # Remove x axis label
ggplot(finalMetrics, aes(x = factor(1), y = mean))
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model)) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
labs(x = NULL)   # Remove x axis label
plot(finalMetrics$mean)
boxplot(finalMetrics$mean)
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model))
model_compare
finalMetrics <- read.csv("final_metrics.csv", h=T, sep=',') %>%
filter(.metric = "f_meas")
finalMetrics <- read.csv("final_metrics.csv", h=T, sep=',') %>%
filter(.metric == "f_meas")
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model)) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
labs(x = NULL)   # Remove x axis label
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model))
ggplot(finalMetrics, aes(x = factor(1), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model)) +
labs(x = NULL)   # Remove x axis label
ggplot(finalMetrics, aes(x = factor(model), y = mean)) +
geom_boxplot(width = 0.9, fill = "white") +
geom_jitter(aes(color = model, shape = model))
ggplot(finalMetrics, aes(x = factor(model), y = mean)) +
geom_point(width = 0.9, fill = "white")
ggplot(finalMetrics) +
geom_point(aes(x = mean, y = model))
ggplot(finalMetrics) +
geom_point(aes(x = mean, y = model,color = model))
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("Step3_featureEngineering.R")
data2$EXPIRE_FLAG<-as.factor(data2$EXPIRE_FLAG)
data2<-data2%>%
select(-FreqDISCHARGE_LOCATION)
data2$ADMITTIME <-ymd_hms(data2$ADMITTIME)
splits_data<- initial_split(data2%>% select(-HADM_ID),
prop =8/10)
data_training <- training(splits_data)
data_test  <- testing(splits_data)
source("Step3_featureEngineering.R")
#setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("Global.R")
pt <-read.csv("PATIENTS.csv")
biodata <-read.csv("cardiacSyndromes.csv")
service <- read.csv("serviceGroup.csv") %>%
select(where(is.numeric) ,-X)
lab <- read.csv("labGroup.csv") %>%
select(where(is.numeric),-X)
med <- read.csv("mediGroup.csv") %>%
select(where(is.numeric),-X)
microb <- read.csv("microGroup.csv") %>%
select(where(is.numeric),-X)
proc <- read.csv("procGroup.csv") %>%
select(where(is.numeric),-X)
data <-biodata %>% nmj
mutate_all(na_if,"") %>%
mutate(MARITAL_STATUS = if_else(is.na(MARITAL_STATUS), "UNKNOWN", MARITAL_STATUS))
data$MARITAL_STATUS<-trimws(data$MARITAL_STATUS)
data$MARITAL_STATUS<-ifelse(grepl("(DEFAULT)",data$MARITAL_STATUS),"UNKNOWN",data$MARITAL_STATUS)
#data$MARITAL_STATUS<-ifelse(grepl("UNKNOWN (DEFAULT)",data$MARITAL_STATUS),"UNKNOWN",data$MARITAL_STATUS)
data$ETHNICITY<-ifelse(grepl("UNKNOWN",data$ETHNICITY),"UNKNOWN",data$ETHNICITY)
data$ETHNICITY<-ifelse(grepl("PATIENT DECLINED",data$ETHNICITY),"UNKNOWN",data$ETHNICITY)
data$Outcome <- ifelse(data$EXPIRE_FLAG==1,"Deceased", "Survived")
data$ETHNICITY2<-ifelse(grepl("ASIAN",data$ETHNICITY),"ASIAN",data$ETHNICITY)
data$ETHNICITY2<-ifelse(grepl("MIDDLE EASTERN",data$ETHNICITY2),"ASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("HISPANIC",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("SOUTH AMERICAN",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("WHITE - BRAZILIAN",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("CARIBBEAN ISLAND",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("ALASKA NATIVE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("NATIVE HAWAIIAN",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("PORTUGUESE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("WHITE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("BLACK",data$ETHNICITY2),"BLACK",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("MULTI RACE ETHNICITY",data$ETHNICITY2),"OTHER",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("UNABLE TO  cannot open the connection
In addition: Warning message:
OBTAIN",data$ETHNICITY2),"UNKNOWN",data$ETHNICITY2)
theme_gtsummary_journal(journal = "jama")
#> Setting theme `JAMA`
theme_gtsummary_compact()
#> Setting theme `Compact
data<-as.data.frame(data)
#trial2<-data %>%
# select(GENDER,AGE,INSURANCE,MARITAL_STATUS,ETHNICITY2,Outcome) %>%
#mutate(INSURANCE = recode(INSURANCE, Medicaid = "Public",Medicare="Public",Government="Public")) %>%
#mutate(MARITAL_STATUS = recode(MARITAL_STATUS,DIVORCED = "Living alone",SEPARATED="Living alone",
#                             SINGLE="Living alone",WIDOWED="Living alone",'LIFE PARTNER'="Living with Partner",
#                             MARRIED="Living with Partner")) %>%
# tbl_summary(
#  by = Outcome,
# statistic = list(all_continuous() ~ "{mean} ({sd})",
#                  all_categorical() ~ "{n} ({p}%)"),
# digits = all_continuous() ~ 2
#label = ETHNICITY2 ~ "Ethinicity",
#  missing_text = "(Missing)"
# ) %>%
#add_p() %>%
#modify_caption("**Patient Characteristics**") %>%
#bold_labels()
#theme_gtsummary_journal(journal = "jama")
#> Setting theme `JAMA`
#theme_gtsummary_compact()
#> Setting theme `Compact`
#trial2
## Time PLot
dataPlot <-biodata %>%
select(ADMITTIME,EXPIRE_FLAG) %>%
mutate(year = lubridate::year(ADMITTIME)) %>%
select(-ADMITTIME)
Dead<-dataPlot %>%
filter(EXPIRE_FLAG==0) %>%
count(year, sort = TRUE) %>%
mutate(status = "Survived")
survive<-dataPlot %>%
filter(EXPIRE_FLAG== 1) %>%
count(year, sort = TRUE) %>%
mutate(status = "Dead")
dataPlot1<-rbind(Dead,survive)
dataPlot<-ggplot(dataPlot1, aes(x = year, y = n)) +
geom_line(aes(color = status), size = 1) +
#scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_economist() +
ggtitle("From 2100 to 2190 (Full Data Set)") +
xlab("Year(shifted)") + ylab("Number of admissions")
p2 <- dataPlot1 %>%
#filter(year<2130) %>%
ggplot(aes(year, n)) +
#geom_line(color = palette_light()[[1]], alpha = 0.5) +
geom_line(aes(color = status), size = 1) +
#geom_point(color = palette_light()[[1]]) +
#geom_smooth(method = "loess", span = 0.2, se = FALSE) +
#theme_economist() +
theme_wsj()+
labs(
title = "2100 to 2130 (Zoomed In To Show Cycle)",
caption = "Number of admissions"
)
## PCA
source("summaryStats.R")
gender<-data.frame(prop.table(table(biodata$GENDER)))
names(gender)[names(gender) == "Var1"] <- "GENDER"
names(gender)[names(gender) == "Freq"] <- "FreqGENDER"
admintype<-data.frame(prop.table(table(biodata$ADMISSION_TYPE)))
names(admintype)[names(admintype) == "Var1"] <- "ADMISSION_TYPE"
names(admintype)[names(admintype) == "Freq"] <- "FreqADMISSION_TYPE"
adminloc<-data.frame(prop.table(table(biodata$ADMISSION_LOCATION)))
names(adminloc)[names(adminloc) == "Var1"] <- "ADMISSION_LOCATION"
names(adminloc)[names(adminloc) == "Freq"] <- "FreqADMISSION_LOCATION"
insurance<-data.frame(prop.table(table(biodata$INSURANCE)))
names(insurance)[names(insurance) == "Var1"] <- "INSURANCE"
names(insurance)[names(insurance) == "Freq"] <- "FreqINSURANCE"
religion<-data.frame(prop.table(table(biodata$RELIGION)))
names(religion)[names(religion) == "Var1"] <- "RELIGION"
names(religion)[names(religion) == "Freq"] <- "FreqRELIGION"
marital<-data.frame(prop.table(table(biodata$MARITAL_STATUS)))
names(marital)[names(marital) == "Var1"] <- "MARITAL_STATUS"
names(marital)[names(marital) == "Freq"] <- "FreqMARITAL_STATUS"
ethninicity<-data.frame(prop.table(table(biodata$ETHNICITY)))
names(ethninicity)[names(ethninicity) == "Var1"] <- "ETHNICITY"
names(ethninicity)[names(ethninicity) == "Freq"] <- "FreqETHNICITY"
language<-data.frame(prop.table(table(biodata$LANGUAGE)))
names(language)[names(language) == "Var1"] <- "LANGUAGE"
names(language)[names(language) == "Freq"] <- "FreqLANGUAGE"
dischargeLocation<-data.frame(prop.table(table(biodata$DISCHARGE_LOCATION)))
names(dischargeLocation)[names(dischargeLocation) == "Var1"] <- "DISCHARGE_LOCATION"
names(dischargeLocation)[names(dischargeLocation) == "Freq"] <- "FreqDISCHARGE_LOCATION"
data2<-merge(x=biodata, y=gender, by="GENDER", all=TRUE)
data2<-merge(x=data2, y=admintype, by="ADMISSION_TYPE", all=TRUE)
data2<-merge(x=data2, y=adminloc, by="ADMISSION_LOCATION", all=TRUE)
data2<-merge(x=data2, y=insurance, by="INSURANCE", all=TRUE)
data2<-merge(x=data2, y=religion, by="RELIGION", all=TRUE)
data2<-merge(x=data2, y=marital, by="MARITAL_STATUS", all=TRUE)
data2<-merge(x=data2, y=ethninicity, by="ETHNICITY", all=TRUE)
data2<-merge(x=data2, y=dischargeLocation, by="DISCHARGE_LOCATION", all=TRUE)
data2<-merge(x=data2, y=language, by="LANGUAGE", all=TRUE)
biodata <- data2%>% dplyr::select(where(is.numeric))
data2<-data2%>%
select(-GENDER,-ADMISSION_TYPE,-ADMISSION_LOCATION,-INSURANCE,-RELIGION,-MARITAL_STATUS,-DISCHARGE_LOCATION,-ETHNICITY,-LANGUAGE,
-DISCHTIME,-DEATHTIME,-EDREGTIME,-EDOUTTIME,-DIAGNOSIS,-HAS_CHARTEVENTS_DATA,-DOB,-LOS2,-Period,-endGoldenHour,-nAdmissions,-HOSPITAL_EXPIRE_FLAG,
-deadBefore,-SUBJECT_ID,-DIAGNOSIS2,-DIAGNOSIS3,-X,-dayOfYear,-Month,-week,-weekday,-year,-hour)
data2<-merge(x=data2,y=lab, by="HADM_ID", all=TRUE)%>%
replace(is.na(.), 0)
data2<-merge(x=data2,y=microb, by="HADM_ID", all=TRUE)%>%
replace(is.na(.), 0)
data2<-merge(x=data2,y=proc, by="HADM_ID", all=TRUE)%>%
replace(is.na(.), 0)
data2<-merge(x=data2,y=med, by="HADM_ID", all=TRUE)%>%
replace(is.na(.), 0)
#data<-data2
#index = createDataPartition(data$HADM_ID, p = 0.70, list = FALSE)
#train = data[index, ]
#test = data[-index, ]
#train_y<-data.frame(train$EXPIRE_FLAG)
#train<-train%>%
#  select(-HADM_ID,-EXPIRE_FLAG)%>%
#  select_if(~!all(is.na(.))) # Remove any column with all 0s
#preObj <- preProcess(train, method=c("center", "scale"))
#train <- predict(preObj, train)
#train<-data.frame(train)
#p <- pca(train)
#trainPcaPlot<-p$loadings[,1:17]
#trainPcaPlot<-cbind(trainPcaPlot,train_y$train.EXPIRE_FLAG)
#names(trainPcaPlot)[names(trainPcaPlot) == 'train_y$train.EXPIRE_FLAG'] <- "Outcome"
#pcaPlot<-trainPcaPlot %>%
#  mutate(Outcome = ifelse(Outcome==0, "Survived","Died"))%>%
#  ggplot(aes(PC1, PC2, color = Outcome)) + geom_point()
#library(plotly)
#fig <- plot_ly()
#trainPcaPlot$Outcome <- as.factor(trainPcaPlot$Outcome)
#fig <- plot_ly(trainPcaPlot, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Outcome, colors = c('#BF382A', '#0C4B8E'))
#fig <- fig %>% add_markers()
#fig <- fig %>% plotly::layout(scene = list(xaxis = list(title = 'Weight'),
#                                           yaxis = list(title = 'Gross horsepower'),
#                                           zaxis = list(title = '1/4 mile time')))
#fig
#Ninty<- which(cumsum(p$variance) > 90)[1]
#horn <- parallelPCA(train)
#horn$n
#elbow <- findElbowPoint(p$variance)
#elbow
#screePlot<-PCAtools::screeplot(p,
#                    components = getComponents(p, 1:20),
#                    vline = c(horn$n, elbow)) +
#  geom_label(aes(x = horn$n + 1, y = 50,
#                 label = 'Horn\'s', vjust = -1, size = 8)) +
#  geom_label(aes(x = elbow + 1, y = 50,
#                 label = 'Elbow method', vjust = -1, size = 8))
#setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("Global.R")
pt <-read.csv("PATIENTS.csv")
biodata <-read.csv("cardiacSyndromes.csv")
service <- read.csv("serviceGroup.csv") %>%
select(where(is.numeric) ,-X)
lab <- read.csv("labGroup.csv") %>%
select(where(is.numeric),-X)
med <- read.csv("mediGroup.csv") %>%
select(where(is.numeric),-X)
microb <- read.csv("microGroup.csv") %>%
select(where(is.numeric),-X)
proc <- read.csv("procGroup.csv") %>%
select(where(is.numeric),-X)
data <-biodata %>% nmj
mutate_all(na_if,"") %>%
mutate(MARITAL_STATUS = if_else(is.na(MARITAL_STATUS), "UNKNOWN", MARITAL_STATUS))
data$MARITAL_STATUS<-trimws(data$MARITAL_STATUS)
data$MARITAL_STATUS<-ifelse(grepl("(DEFAULT)",data$MARITAL_STATUS),"UNKNOWN",data$MARITAL_STATUS)
#data$MARITAL_STATUS<-ifelse(grepl("UNKNOWN (DEFAULT)",data$MARITAL_STATUS),"UNKNOWN",data$MARITAL_STATUS)
data$ETHNICITY<-ifelse(grepl("UNKNOWN",data$ETHNICITY),"UNKNOWN",data$ETHNICITY)
data$ETHNICITY<-ifelse(grepl("PATIENT DECLINED",data$ETHNICITY),"UNKNOWN",data$ETHNICITY)
data$Outcome <- ifelse(data$EXPIRE_FLAG==1,"Deceased", "Survived")
data$ETHNICITY2<-ifelse(grepl("ASIAN",data$ETHNICITY),"ASIAN",data$ETHNICITY)
data$ETHNICITY2<-ifelse(grepl("MIDDLE EASTERN",data$ETHNICITY2),"ASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("HISPANIC",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("SOUTH AMERICAN",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("WHITE - BRAZILIAN",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("CARIBBEAN ISLAND",data$ETHNICITY2),"HISPANIC",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("ALASKA NATIVE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("NATIVE HAWAIIAN",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("PORTUGUESE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("WHITE",data$ETHNICITY2),"CAUCASIAN",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("BLACK",data$ETHNICITY2),"BLACK",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("MULTI RACE ETHNICITY",data$ETHNICITY2),"OTHER",data$ETHNICITY2)
data$ETHNICITY2<-ifelse(grepl("UNABLE TO  cannot open the connection
In addition: Warning message:
OBTAIN",data$ETHNICITY2),"UNKNOWN",data$ETHNICITY2)
theme_gtsummary_journal(journal = "jama")
#> Setting theme `JAMA`
theme_gtsummary_compact()
#> Setting theme `Compact
data<-as.data.frame(data)
#trial2<-data %>%
# select(GENDER,AGE,INSURANCE,MARITAL_STATUS,ETHNICITY2,Outcome) %>%
#mutate(INSURANCE = recode(INSURANCE, Medicaid = "Public",Medicare="Public",Government="Public")) %>%
#mutate(MARITAL_STATUS = recode(MARITAL_STATUS,DIVORCED = "Living alone",SEPARATED="Living alone",
#                             SINGLE="Living alone",WIDOWED="Living alone",'LIFE PARTNER'="Living with Partner",
#                             MARRIED="Living with Partner")) %>%
# tbl_summary(
#  by = Outcome,
# statistic = list(all_continuous() ~ "{mean} ({sd})",
#                  all_categorical() ~ "{n} ({p}%)"),
# digits = all_continuous() ~ 2
#label = ETHNICITY2 ~ "Ethinicity",
#  missing_text = "(Missing)"
# ) %>%
#add_p() %>%
#modify_caption("**Patient Characteristics**") %>%
#bold_labels()
#theme_gtsummary_journal(journal = "jama")
#> Setting theme `JAMA`
#theme_gtsummary_compact()
#> Setting theme `Compact`
#trial2
## Time PLot
dataPlot <-biodata %>%
select(ADMITTIME,EXPIRE_FLAG) %>%
mutate(year = lubridate::year(ADMITTIME)) %>%
select(-ADMITTIME)
Dead<-dataPlot %>%
filter(EXPIRE_FLAG==0) %>%
count(year, sort = TRUE) %>%
mutate(status = "Survived")
survive<-dataPlot %>%
filter(EXPIRE_FLAG== 1) %>%
count(year, sort = TRUE) %>%
mutate(status = "Dead")
dataPlot1<-rbind(Dead,survive)
dataPlot<-ggplot(dataPlot1, aes(x = year, y = n)) +
geom_line(aes(color = status), size = 1) +
#scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_economist() +
ggtitle("From 2100 to 2190 (Full Data Set)") +
xlab("Year(shifted)") + ylab("Number of admissions")
p2 <- dataPlot1 %>%
#filter(year<2130) %>%
ggplot(aes(year, n)) +
#geom_line(color = palette_light()[[1]], alpha = 0.5) +
geom_line(aes(color = status), size = 1) +
#geom_point(color = palette_light()[[1]]) +
#geom_smooth(method = "loess", span = 0.2, se = FALSE) +
#theme_economist() +
theme_wsj()+
labs(
title = "2100 to 2130 (Zoomed In To Show Cycle)",
caption = "Number of admissions"
)
data <-biodata %>%
mutate_all(na_if,"") %>%
mutate(MARITAL_STATUS = if_else(is.na(MARITAL_STATUS), "UNKNOWN", MARITAL_STATUS))
source("Step3_featureEngineering.R")

collect_predictions(parameters = rf_best) %>%
mutate(estimate = if_else(.pred_0>=0.5,"0","1")) %>%
f_meas(EXPIRE_FLAG, estimate) %>%
mutate(model = "Tuned Random Forest")
f_meas(EXPIRE_FLAG, estimate) %>%
mutate(model = "Tuned Random Forest")
rf_best_res
rf_best_res %>%
collect_predictions(parameters = rf_best)
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1)))
rf_auc_f2 <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1))) %>%
f_meas(EXPIRE_FLAG, estimate) %>%
mutate(model = "Tuned Random Forest")
rf_auc_f2
rf_auc_f2 <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1))) %>%
f_meas(EXPIRE_FLAG, estimate,beta = 1) %>%
mutate(model = "Tuned Random Forest")
rf_auc_f2
control = control_grid(save_pred = TRUE),
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(f_meas))
f_best_res
rf_best_res
rf_best <-
rf_best_res %>%
select_best(metric = "roc_auc")
rf_best <-
rf_best_res %>%
select_best(metric = "f_meas")
rf_best <-
rf_best_res %>%
select_best(metric = "f_meas")
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(EXPIRE_FLAG, .pred_0) %>%
mutate(model = "Tuned Random Forest")
rf_best_res
rf_best
rf_best_res
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(EXPIRE_FLAG, .pred_0) %>%
mutate(model = "Tuned Random Forest")
## The model with the best estimate
rf_auc_f2 <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1))) %>%
f_meas(EXPIRE_FLAG, estimate,beta = 1) %>%
mutate(model = "Tuned Random Forest")
rf_best_workflow <-
workflow() %>%
add_model(rf_best_mod) %>%
add_recipe(lr_recipe)
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
rf_best_res
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(f_meas))
rf_best_res
rf_best <-
rf_best_res %>%
select_best(metric = "f_meas")
rf_best
rf_auc_f2 <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1))) %>%
f_meas(EXPIRE_FLAG, estimate,beta = 1) %>%
mutate(model = "Tuned Random Forest")
rf_best_res
View(rf_best_res)
View(rf_best_res[[3]][[1]])
View(rf_best_res[[5]][[1]])
## The model with the best estimate
rf_auc_f2 <-
rf_best_res[[5]][[1]] %>%
collect_predictions(parameters = rf_best) %>%
mutate(estimate = as.factor(if_else(.pred_0>=0.5,0,1))) %>%
f_meas(EXPIRE_FLAG, estimate,beta = 1) %>%
mutate(model = "Tuned Random Forest")
rf_best_res <-
rf_best_workflow %>%
tune_grid(val_set,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
rf_best_res
View(rf_best_res)
View(rf_best_res[[3]][[1]])
rf_best <-
rf_best_res %>%
select_best(metric = "roc_auc")
rf_best
rf_best_res %>%
collect_predictions()
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(EXPIRE_FLAG, .pred_0) %>%
mutate(model = "Tuned Random Forest")
rf_auc_best
last_fit_rf <- last_fit(rf_best_workflow,
split = split,
metrics = metric_set(
recall, precision, f_meas,
accuracy, kap,
roc_auc, sens, spec)
)
last_fit_rf <- last_fit(rf_best_workflow,
split = splits,
metrics = metric_set(
recall, precision, f_meas,
accuracy, kap,
roc_auc, sens, spec)
)
last_fit_rf <- last_fit(rf_best_workflow,
split = splits,
metrics = metric_set(
f_meas,
accuracy, kap,
roc_auc, sens, spec)
)
splits<- initial_split(data2%>% select(-HADM_ID),
prop =3/4,
strata = EXPIRE_FLAG)
data_training <- training(splits)
data_test  <- testing(splits)
data_training %>%
count(EXPIRE_FLAG) %>%
mutate(prop = n/sum(n))
data_test  %>%
count(EXPIRE_FLAG) %>%
mutate(prop = n/sum(n))
val_set <- validation_split(data_training,
strata = EXPIRE_FLAG,
prop = 0.80)
val_set
lr_recipe <-
recipe(EXPIRE_FLAG ~ ., data = data_training) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.7, method = "spearman")
last_recipe <-
recipe(EXPIRE_FLAG ~ ., data = data2) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.7, method = "spearman")
last_recipe <-
recipe(EXPIRE_FLAG ~ ., data = data2) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_corr(all_predictors(), threshold = 0.7, method = "spearman")
last_wflow <-
workflow() %>%
add_recipe(last_recipe) %>%
add_model(rf_spec)
last_fit_rf <- last_fit(rf_best_workflow,
split = splits,
metrics = metric_set(
f_meas,
accuracy, kap,
roc_auc, sens, spec)
)
rf_auc_best
rf_best
last_rf_mod <-
rand_forest(mtry = 4, min_n = 29, trees = 1000) %>%
set_engine("ranger", num.threads = cores, importance = "impurity") %>%
set_mode("classification")
last_rf_workflow <-
rf_best_workflow %>%
update_model(last_rf_mod)
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits)
last_rf_fit
last_rf_fit %>%
collect_metrics()
last_rf_fit %>%
pluck(".workflow", 1) %>%
pull_workflow_fit() %>%
vip(num_features = 20)
last_rf_fit %>%
pluck(".workflow", 1) %>%
extract_fit_parsnip() %>%
vip(num_features = 20)
rf_best <-
last_rf_fit %>%
select_best(metric = "f_meas")
last_rf_fit %>%
collect_metrics()
rf_auc_best <-
rf_best_res %>%
collect_predictions(parameters = rf_best) %>%
roc_curve(EXPIRE_FLAG, .pred_0) %>%
mutate(model = "Tuned Random Forest")
rf_auc_best
last_rf_fit %>%
collect_metrics()
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'Step 1. Wake up']
rec2 [label = 'Step 2. Write code']
rec3 [label =  'Step 3. ???']
rec4 [label = 'Step 4. PROFIT']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'Step 1. Wake up']
rec2 [label = 'Step 2. Write code']
rec3 [label =  'Step 3. ???']
rec4 [label = 'Step 4. PROFIT']
# edge definitions with the node IDs
rec1 -> rec2 -> {rec3, rec4}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'testing']
rec4 [label = 'Step 4. PROFIT']
# edge definitions with the node IDs
rec1 -> {rec2,rec3} -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Training']
rec5 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3-> rec4}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Training']
rec5 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec3-> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Training']
rec5 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = 'Sample 2']
rec6 [label = 'Sample 2']
rec7 [label = 'Sample 2']
rec8 [label = 'Sample 5']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6, rec7, rec8}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = 'Sample 2']
rec6 [label = 'Sample 2']
rec7 [label = 'Sample 2']
rec8 [label = 'Sample 5']
rec9 [label = 'Training']
rec10 [label = 'Validation']
rec11 [label = 'Training']
rec12 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6, rec7, rec8}
rec4 -> {rec9,rec10}
rec5 -> {rec11,rec12}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = 'Sample 2']
rec6 [label = 'Training']
rec7 [label = 'Validation']
rec8 [label = 'Training']
rec9 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6, rec7, rec8}
rec4 -> {rec6,rec7}
rec5 -> {rec8,rec9}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = 'Sample 2']
rec6 [label = 'Training']
rec7 [label = 'Validation']
rec8 [label = 'Training']
rec9 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5}
rec4 -> {rec6,rec7}
rec5 -> {rec8,rec9}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training',shape = rhombus]
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = 'Sample 2']
rec6 [label = 'Training']
rec7 [label = 'Validation']
rec8 [label = 'Training']
rec9 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5}
rec4 -> {rec6,rec7}
rec5 -> {rec8,rec9}
}",
height = 500)
mermaid("
graph LR
A(Rounded)-->B[Rectangular]
B-->C{A Rhombus}
C-->D[Rectangle One]
C-->E[Rectangle Two]
")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = '......']
rec6 [label = 'Sample 5']
rec7 [label = 'Training']
rec8 [label = 'Validation']
rec9 [label = 'Training']
rec10 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6}
rec4 -> {rec7,rec8}
rec6 -> {rec9,rec10}
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec5 [label = '......']
rec6 [label = 'Sample 5']
rec7 [label = 'Training']
rec8 [label = 'Validation']
rec9 [label = 'Training']
rec10 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6}
rec4 -> {rec7,rec8}
rec6 -> {rec9,rec10}
}", height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec6 [label = 'Sample 5']
rec7 [label = 'Training']
rec8 [label = 'Validation']
rec9 [label = 'Training']
rec10 [label = 'Validation']
node [shape = plaintext]
rec5 [label = '......']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6}
rec4 -> {rec7,rec8}
rec6 -> {rec9,rec10}
}", height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = plaintext]
rec5 [label = '......']
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
rec6 [label = 'Sample 5']
rec7 [label = 'Training']
rec8 [label = 'Validation']
rec9 [label = 'Training']
rec10 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6}
rec4 -> {rec7,rec8}
rec6 -> {rec9,rec10}
}", height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'All data']
rec2 [label = 'Training']
rec3 [label =  'Testing']
rec4 [label = 'Sample 1']
node [shape = plaintext]
rec5 [label = '......']
node [shape = rectangle]
rec6 [label = 'Sample 5']
rec7 [label = 'Training']
rec8 [label = 'Validation']
rec9 [label = 'Training']
rec10 [label = 'Validation']
# edge definitions with the node IDs
rec1 -> {rec2,rec3}
rec2-> {rec4,rec5,rec6}
rec4 -> {rec7,rec8}
rec6 -> {rec9,rec10}
}", height = 500)
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4")
source("summaryStats.R")
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("summaryStats.R")
0.75/5
0.15*.8
0.15*.3
0.15*.2
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("summaryStats.R")
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("summaryStats.R")
setwd("E:/school/data mining/project/mimic-iii-clinical-database-1.4/mimic-iii-clinical-database-1.4/codes")
source("summaryStats.R")
